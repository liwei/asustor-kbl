#!/bin/busybox sh

#
# if kexec succeeds, this function won't return. if the function
# returns, it means kexec has failed.    
#
boot_new_kernel() {

    # debug
    echo "command line: $(cat /mnt/boot/cmdline)"

    # 
    #  check ramdisk
    #
    if [ ! -e "/mnt/boot/ramdisk" ]; then
        # does not exist
        kexec -l /mnt/boot/bzImage --command-line="$(cat /mnt/boot/cmdline)"
    else 
        # ramdisk file does not exist
        kexec -l /mnt/boot/bzImage --initrd=/mnt/boot/ramdisk --command-line="$(cat /mnt/boot/cmdline)"
    fi

    if [ $? -eq 0 ]; then
        kexec -e
    fi

    return 1
}

#
# if kexec succeeds, this function won't return.
# returns 1 if boot files does not exist or
# returns 0 if kexec fails
# 
check_boot_file() {

    if [ ! -e "/mnt/boot/bzImage" ]; then
        echo "bzImage not found"
        return 1
    fi

    if [ ! -e "/mnt/boot/cmdline" ]; then
        echo "cmdline not found"
        return 1
    fi

    return 0
}

#
#
#
try_boot_partition() {

    printf "check $1 ... "
    if [ -e "$1" ]; then
 
        printf "found\r\n"
        printf "mount $1 ... "
        mount -t auto $1 /mnt   
        if [ $? -eq 0 ]; then printf "success\r\n"
            check_boot_file
            if [ $? -eq 0 ]; then
                boot_new_kernel    
            fi
            echo "umount /mnt ($1)"
            umount /mnt
        else printf "failed\r\n"
        fi
    else 
        printf "not found\r\n"
    fi
}

echo "----------------------------------------"
echo "kernal/kexec bootloader"
echo "init script, PID:$$"
echo "----------------------------------------"

mount -t devtmpfs   none            /dev
mount -t proc       none            /proc
mount -t sysfs      none            /sys

# create symbol link for busybox
/bin/busybox --install -s

# create /dev with mdev
echo /sbin/mdev >/proc/sys/kernel/hotplug
mdev -s

INTERRUPT=
 
for i in 3 2 1 0; do
    printf "\rPress ANY KEY within $i seconds to disable automatic boot."
    read -s -n 1 -t 1 key
    if [ $? -eq 0 ]
    then
        INTERRUPT="yes"
        break
    fi
done

printf "\r\n"
 
if [ "$INTERRUPT" = "yes" ]; then
    # 
    # user interrupted, enter shell
    #
    exec /bin/busybox sh
else
    #
    # no user interrupt, automatic boot
    #

    try_boot_partition /dev/sda1
    try_boot_partition /dev/sdb1

    echo "no bootable device/partition found. fall back to shell"
    exec /bin/busybox sh
fi
